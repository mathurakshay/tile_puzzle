// Generated by CoffeeScript 1.6.1
(function() {
  var check_completion, free_cell, get_random_list, image_url, set_cursor, start_puzzle,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  image_url = "";

  free_cell = {
    row: 4,
    col: 4
  };

  /*
  # returns a shuffeled list of numbers from 1 to the given number
  */


  get_random_list = function(t) {
    var n, r_list, _i, _results;
    r_list = [];
    while (r_list.length < t) {
      n = Math.round(Math.random() * 100);
      if (__indexOf.call(r_list, n) < 0 && __indexOf.call((function() {
        _results = [];
        for (var _i = 1; 1 <= t ? _i <= t : _i >= t; 1 <= t ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), n) >= 0) {
        r_list.push(n);
      }
    }
    return r_list;
  };

  /*
  # arreanges the tiles for the first time (shuffeled) 
  # either with an image or with numbers
  */


  start_puzzle = function() {
    var i, items, _i;
    items = get_random_list(15);
    for (i = _i = 1; _i <= 15; i = ++_i) {
      if (image_url) {
        $("div[data-pos=" + i + "]").html("<div class='tile-ssimg tile_" + items[i - 1] + "' data-seq='" + items[i - 1] + "'></div>");
      } else {
        $("div[data-pos=" + i + "]").html("<div class='tile-num' data-seq='" + items[i - 1] + "'>" + items[i - 1] + "</div>");
      }
    }
    free_cell.row = free_cell.col = 4;
    $("div[data-pos=16]").html('');
    set_cursor();
    return check_completion();
  };

  /*
  # Takes care that hand cursor shows up on the movable tiles
  */


  set_cursor = function() {
    $(".col").removeClass('hand_pointer');
    $("div[data-col=" + free_cell.col + "]").addClass('hand_pointer');
    $("div[data-row=" + free_cell.row + "] .col").addClass('hand_pointer');
    return $("div[data-row=" + free_cell.row + "] div[data-col=" + free_cell.col + "]").removeClass('hand_pointer');
  };

  /*
  # Lets user know current completion status
  # Greets the user on complition and re-starts new game
  */


  check_completion = function() {
    var complition, correct, i, incorrect, _i;
    correct = incorrect = 0;
    for (i = _i = 1; _i <= 15; i = ++_i) {
      if ($("div[data-pos=" + i + "]>div").attr('data-seq') === ("" + i)) {
        correct++;
      } else {
        incorrect++;
      }
    }
    complition = Math.round(correct * 100 / 15, 1);
    $("#score").text("Complition: " + complition + "% (correct: " + correct + "; incorrect: " + incorrect + ")");
    if (complition === 100) {
      alert("Congratulations! You won");
      return start_puzzle();
    }
  };

  $(document).ready(function() {
    /*
    	# Gets invoked when user clicks the button in front of text box for changing the image
    	# Allows user to play with any image 
    	# sets user provided image in tiles and the preview area
    	# Restarts the puzzle with the new image
    */
    $("#chnage_image").click(function() {
      image_url = $('#image_url').val() ? "url(" + ($('#image_url').val()) + ")" : '';
      start_puzzle();
      $("#preview_div").css("backgroundImage", image_url);
      return $('.tile-ssimg').css("backgroundImage", image_url);
    });
    $("#chnage_image").click();
    /*
    	# gets invoked when user clicks on a tile
    	# Moves tiles as intended by use
    */

    $(".col").click(function(ev) {
      var content_to_move, move_order, target, target_col, target_row, x, _i, _j, _k, _l, _ref, _ref1, _ref2, _ref3, _results, _results1;
      target = $(this);
      target_row = parseInt(target.closest('.row-fluid').attr('data-row'));
      target_col = parseInt(target.attr('data-col'));
      if (target_row === free_cell.row) {
        move_order = (function() {
          _results = [];
          for (var _i = _ref = free_cell.col; _ref <= target_col ? _i <= target_col : _i >= target_col; _ref <= target_col ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
        for (x = _j = 0, _ref1 = move_order.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          content_to_move = $("div[data-row=" + free_cell.row + "]").find("div[data-col=" + move_order[x + 1] + "]").html();
          $("div[data-row=" + free_cell.row + "]").find("div[data-col=" + move_order[x + 1] + "]").html('');
          $("div[data-row=" + free_cell.row + "]").find("div[data-col=" + move_order[x] + "]").html(content_to_move);
          free_cell.col = move_order[x];
        }
      } else if (target_col === free_cell.col) {
        move_order = (function() {
          _results1 = [];
          for (var _k = _ref2 = free_cell.row; _ref2 <= target_row ? _k <= target_row : _k >= target_row; _ref2 <= target_row ? _k++ : _k--){ _results1.push(_k); }
          return _results1;
        }).apply(this);
        for (x = _l = 0, _ref3 = move_order.length - 1; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; x = 0 <= _ref3 ? ++_l : --_l) {
          content_to_move = $("div[data-row=" + move_order[x + 1] + "]").find("div[data-col=" + free_cell.col + "]").html();
          $("div[data-row=" + move_order[x + 1] + "]").find("div[data-col=" + free_cell.col + "]").html('');
          $("div[data-row=" + move_order[x] + "]").find("div[data-col=" + free_cell.col + "]").html(content_to_move);
          free_cell.row = move_order[x];
        }
      }
      set_cursor();
      check_completion();
    });
  });

}).call(this);
